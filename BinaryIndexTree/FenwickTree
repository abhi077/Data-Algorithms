import java.util.*;

class Binary_Index_Tree{
	
	
  //*** Build a binary index tree array having n+1 indexes
  public void update_bit(int BIT[],int x,int delta)
  {
	  while(x < BIT.length)
	  {
		  BIT[x]=BIT[x]+delta;
		  x=getNext(x);
	  }
  }
  
  //*** To update all the indexes in gives next index to be update
  public int getNext(int index)
  {
	  return ( index + ( index&(-index) ) );
  }
  
  //***  To find sum it gives the parent of the index 
  public int getParent(int index)
  {
	  return ( index - ( index&(-index) ) );
  }
  
  //*** It gives sum to a given range
  public int sum(int BIT[],int index)
  {
	  int sum=0;
	  
	  while(index>0)
	  {
		sum=sum+BIT[index];
        index=getParent(index);
	  }
		return sum;
  }
 
  //*** MAIN Function 
  public static void main(String []args){
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the size of array");
	  int n=sc.nextInt();
	  int ar[]=new int[n];
	  int BIT[]=new int[n+1];
	  System.out.println("Enter the elements of the array");
	  for(int i=0;i<n;i++)
		  ar[i]=sc.nextInt();
	  
	  Binary_Index_Tree bt=new Binary_Index_Tree();
	  for(int i=1;i<=ar.length;i++)
	  {
		bt.update_bit(BIT,i,ar[i-1]);  
	  }
	  
	  System.out.println("Enter the index that  you want sum");
	  int index=sc.nextInt();
	  int a=bt.sum(BIT,index);
	  System.out.println(a);
  }
  
}
	
	
	
	
	
	
	
	
	
	
